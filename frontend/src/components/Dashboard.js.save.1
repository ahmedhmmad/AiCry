import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  ChartBarIcon, 
  CpuChipIcon, 
  SparklesIcon,
  ArrowTrendingUpIcon,
  ArrowTrendingDownIcon,
  ClockIcon
} from '@heroicons/react/24/outline';
import axios from 'axios';

const Dashboard = ({ selectedSymbol, analysisData, setAnalysisData }) => {
  const [loading, setLoading] = useState(false);
  const [currentPrice, setCurrentPrice] = useState(null);
  const [lastUpdate, setLastUpdate] = useState(null);

  const fetchUltimateAnalysis = async () => {
    setLoading(true);
    try {
      const response = await axios.get(`/ai/ultimate-analysis/${selectedSymbol}`);
      setAnalysisData(response.data);
      setCurrentPrice(response.data.current_price);
      setLastUpdate(new Date().toLocaleTimeString('ar-SA'));
    } catch (error) {
      console.error('خطأ في جلب التحليل:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUltimateAnalysis();
  }, [selectedSymbol]);

  const getRecommendationColor = (recommendation) => {
    switch (recommendation) {
      case 'BUY':
      case 'STRONG_BUY':
        return 'text-green-400';
      case 'SELL':
      case 'STRONG_SELL':
        return 'text-red-400';
      default:
        return 'text-yellow-400';
    }
  };

  const getRecommendationIcon = (recommendation) => {
    switch (recommendation) {
      case 'BUY':
      case 'STRONG_BUY':
        return <ArrowTrendingUpIcon className="w-6 h-6" />;
      case 'SELL':
      case 'STRONG_SELL':
        return <ArrowTrendingDownIcon className="w-6 h-6" />;
      default:
        return <ClockIcon className="w-6 h-6" />;
    }
  };

  const getRecommendationText = (recommendation) => {
    const texts = {
      'BUY': 'شراء',
      'STRONG_BUY': 'شراء قوي',
      'SELL': 'بيع',
      'STRONG_SELL': 'بيع قوي',
      'HOLD': 'انتظار'
    };
    return texts[recommendation] || recommendation;
  };

  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
      {/* Price Card */}
      <motion.div
        className="glass-effect rounded-2xl p-6 card-hover"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
      >
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-white">السعر الحالي</h3>
          <ChartBarIcon className="w-6 h-6 text-blue-400" />
        </div>
        
        {currentPrice ? (
          <div>
            <div className="text-3xl font-bold text-white mb-2">
              ${currentPrice?.toLocaleString()}
            </div>
            <div className="text-sm text-gray-400 flex items-center space-x-2 space-x-reverse">
              <ClockIcon className="w-4 h-4" />
              <span>آخر تحديث: {lastUpdate}</span>
            </div>
          </div>
        ) : (
          <div className="animate-pulse">
            <div className="h-8 bg-gray-600 rounded mb-2"></div>
            <div className="h-4 bg-gray-600 rounded w-1/2"></div>
          </div>
        )}
      </motion.div>

      {/* Ultimate Decision Card */}
      <motion.div
        className="glass-effect rounded-2xl p-6 card-hover"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
      >
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-white">القرار النهائي</h3>
          <SparklesIcon className="w-6 h-6 text-purple-400" />
        </div>
        
        {analysisData?.ultimate_decision ? (
          <div>
            <div className={`flex items-center space-x-3 space-x-reverse mb-3 ${getRecommendationColor(analysisData.ultimate_decision.final_recommendation)}`}>
              {getRecommendationIcon(analysisData.ultimate_decision.final_recommendation)}
              <span className="text-2xl font-bold">
                {getRecommendationText(analysisData.ultimate_decision.final_recommendation)}
              </span>
            </div>
            
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-gray-400">مستوى الثقة:</span>
                <span className="text-white font-semibold">
                  {analysisData.ultimate_decision.final_confidence}%
                </span>
              </div>
              
              <div className="w-full bg-gray-700 rounded-full h-2">
                <motion.div
                  className="h-2 rounded-full bg-gradient-to-r from-green-400 to-blue-500"
                  initial={{ width: 0 }}
                  animate={{ width: `${analysisData.ultimate_decision.final_confidence}%` }}
                  transition={{ duration: 1, delay: 0.5 }}
                />
              </div>
              
              <div className="text-sm text-gray-400 mt-2">
                {analysisData.ultimate_decision.reasoning}
              </div>
            </div>
          </div>
        ) : (
          <div className="animate-pulse space-y-3">
            <div className="h-8 bg-gray-600 rounded"></div>
            <div className="h-4 bg-gray-600 rounded"></div>
            <div className="h-2 bg-gray-600 rounded"></div>
          </div>
        )}
      </motion.div>

      {/* Analysis Status Card */}
      <motion.div
        className="glass-effect rounded-2xl p-6 card-hover"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.3 }}
      >
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-white">حالة التحليل</h3>
          <CpuChipIcon className="w-6 h-6 text-green-400" />
        </div>
        
        <div className="space-y-4">
          <motion.button
            className="w-full bg-gradient-to-r from-green-500 to-blue-500 text-white py-3 px-4 rounded-xl font-semibold transition-all duration-300 hover:from-green-600 hover:to-blue-600 disabled:opacity-50"
            onClick={fetchUltimateAnalysis}
            disabled={loading}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            {loading ? (
              <div className="flex items-center justify-center space-x-2 space-x-reverse">
                <div className="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent"></div>
                <span>جاري التحليل...</span>
              </div>
            ) : (
              'تحديث التحليل'
            )}
          </motion.button>
          
          {analysisData && (
            <div className="grid grid-cols-3 gap-2 text-sm">
              <div className="text-center p-2 bg-green-500/20 rounded-lg">
                <div className="text-green-400 font-semibold">فني</div>
                <div className="text-xs text-gray-400">متاح</div>
              </div>
              <div className="text-center p-2 bg-blue-500/20 rounded-lg">
                <div className="text-blue-400 font-semibold">AI بسيط</div>
                <div className="text-xs text-gray-400">متاح</div>
              </div>
              <div className="text-center p-2 bg-purple-500/20 rounded-lg">
                <div className="text-purple-400 font-semibold">AI متقدم</div>
                <div className="text-xs text-gray-400">متاح</div>
              </div>
            </div>
          )}
        </div>
      </motion.div>
    </div>
  );
};

export default Dashboard;
